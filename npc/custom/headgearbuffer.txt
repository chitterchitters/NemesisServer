//===== Hercules Script ======================================
//= Headgear Buffer
//===== By: ==================================================
//= Darkwolf7786
//===== Current Version: =====================================
//= 0.2 Alpha Test
//===== Description: =========================================
//= Upgrades Lower, Middle, and Upper Headgears with Bonus Stats
//===== Additional Comments: =================================
//= 0.2 Cleaned up all sorts of stuff.
//= 0.1 Initial script.  Supports only Lower Headgears upgrading Stats from 1 to 3.
//============================================================

prontera,146,170,5	script	Fallen Angel#mal2	4_F_VALKYRIE,{

function modifieralreadyexists; function finished; function generateitem; function isstatmaxedout; function isnotenoughzeny; function isnotenoughitem;
function getSTRupgrade; function getAGIupgrade; function getVITupgrade; function getINTupgrade; function getDEXupgrade; function getLUKupgrade;
function getUPPERupgrade;

function modifieralreadyexists {
		mes "[Fallen Angel]";
		mes "This item already has that type of upgrade and cannot be selected.";
		close;
		end;
}

function finished {
		mes "[Fallen Angel]";
		mes "Hopefully if everything went well";
		mes "Your item should be ready and in your inventory";
		mes "";
		mes "If not, then it sucks to be you.";
		close;
		end;
}

function generateitem {
		//(0 - SelectedCardSlot, 1 - SelectedSlotValue, 2 - Item ID, 3 - Refine Rate, 4 - Card 0, 5 - Card 1, 6 - Card 2, 7 - Card 3, 8 - EquipID Slot)
		
		delequip (getarg(8));
		
		switch (getarg(0)) {
			case 0:
				getitem2 getarg(2), 1, 1, getarg(3), 0, getarg(1), getarg(5), getarg(6), getarg(7);
				break;
			case 1:
				getitem2 getarg(2), 1, 1, getarg(3), 0, getarg(4), getarg(1), getarg(6), getarg(7);
				break;
			case 2:
				getitem2 getarg(2), 1, 1, getarg(3), 0, getarg(4), getarg(5), getarg(1), getarg(7);
				break;
			case 3:
				getitem2 getarg(2), 1, 1, getarg(3), 0, getarg(4), getarg(5), getarg(6), getarg(1);
				break;
		}
		specialeffect2 EF_REPAIRWEAPON;
		return;
}

function isstatmaxedout {
		//statmaxedout (@modlevel, maximum level, Stat Descriptive Name) //Stat will be any string variable;
		if (getarg(0) >= getarg(1)) { //This determines the max mod level.  Will set at 3 for testing, Max is up to 10.
				mes "[Fallen Angel]";
				mes "This item already has the highest level of "+getarg(2)+" and cannot upgrade further.";
				close;
		}
		return;
}

function isnotenoughzeny {
		if (Zeny < getarg(0)){
			mes "[Fallen Angel]";
			mes "You do not have enough Zeny for this upgrade!";
			close;
		}
		return;
}

function isnotenoughitem {
		if (countitem(getarg(0)) < getarg(1)) {
			mes "[Fallen Angel]";
			mes "You are missing "+(getarg(1)-countitem(getarg(0)))+" "+getitemname(getarg(0))+"(s).";
			close;
		}
		return;
}

function getSTRupgrade {
		//getSTRupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Strength";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Strength and has 10 levels";
				mes "Lv 1  - +1 Strength";
				mes "Lv 2  - +2 Strength";
				mes "Lv 3  - +3 Strength";
				mes "Lv 4  - +4 Strength";
				mes "Lv 5  - +5 Strength";
				mes "Lv 6  - +6 Strength";
				mes "Lv 7  - +7 Strength";
				mes "Lv 8  - +8 Strength";
				mes "Lv 9  - +9 Strength";
				mes "Lv 10 - +10 Strength";
				break;
			case 1:
				mes "Current Level: 1";
				mes "   STR+1";
				mes "";
				mes "Next Level: 2";
				mes "   STR+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   STR+2";
				mes "";
				mes "Next Level: 3";
				mes "   STR+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   STR+3";
				mes "";
				mes "Next Level: 4";
				mes "   STR+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   STR+4";
				mes "";
				mes "Next Level: 5";
				mes "   STR+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Animal Gore";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   STR+5";
				mes "";
				mes "Next Level: 6";
				mes "   STR+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Tassels";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   STR+6";
				mes "";
				mes "Next Level: 7";
				mes "   STR+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Broken Wine Vessels";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   STR+7";
				mes "";
				mes "Next Level: 8";
				mes "   STR+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 Broken Farming Utensils";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   STR+8";
				mes "";
				mes "Next Level: 9";
				mes "   STR+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Dark Pieces";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   STR+9";
				mes "";
				mes "Next Level: 10";
				mes "   STR+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Fire Dragon Scale";
				break;
		}
		mes "";
		mes "Would you like to continue with this modification?";
				switch(select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getAGIupgrade {
		//getAGIupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Agility";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Agility and has 10 levels.";
				mes "Lv 1  - +1 AGI";
				mes "Lv 2  - +2 AGI";
				mes "Lv 3  - +3 AGI";
				mes "Lv 4  - +4 AGI";
				mes "Lv 5  - +5 AGI";
				mes "Lv 6  - +6 AGI";
				mes "Lv 7  - +7 AGI";
				mes "Lv 8  - +8 AGI";
				mes "Lv 9  - +9 AGI";
				mes "Lv 10 - +10 AGI";
			case 1:
				mes "Current Level: 1";
				mes "   AGI+1";
				mes "";
				mes "Next Level: 2";
				mes "   AGI+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   AGI+2";
				mes "";
				mes "Next Level: 3";
				mes "   AGI+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   AGI+3";
				mes "";
				mes "Next Level: 4";
				mes "   AGI+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   AGI+4";
				mes "";
				mes "Next Level: 5";
				mes "   AGI+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Izidor";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   AGI+5";
				mes "";
				mes "Next Level: 6";
				mes "   AGI+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Needles of Alarm";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   AGI+6";
				mes "";
				mes "Next Level: 7";
				mes "   AGI+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Broken Shuriken";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   AGI+7";
				mes "";
				mes "Next Level: 8";
				mes "   AGI+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 Old Shuriken";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   AGI+8";
				mes "";
				mes "Next Level: 9";
				mes "   AGI+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Crystals of Darkness";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   AGI+9";
				mes "";
				mes "Next Level: 10";
				mes "   AGI+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Pocket Watch";
				break;
		}
		mes "";
		mes "Would you like to upgrade now?";
				switch(select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getVITupgrade {
		//getVITupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Vitality";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Vitality and has 10 levels.";
				mes "Lv 1  - +1 VIT";
				mes "Lv 2  - +2 VIT";
				mes "Lv 3  - +3 VIT";
				mes "Lv 4  - +4 VIT";
				mes "Lv 5  - +5 VIT";
				mes "Lv 6  - +6 VIT";
				mes "Lv 7  - +7 VIT";
				mes "Lv 8  - +8 VIT";
				mes "Lv 9  - +9 VIT";
				mes "Lv 10 - +10 VIT";
			case 1:
				mes "Current Level: 1";
				mes "   VIT+1";
				mes "";
				mes "Next Level: 2";
				mes "   VIT+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   VIT+2";
				mes "";
				mes "Next Level: 3";
				mes "   VIT+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   VIT+3";
				mes "";
				mes "Next Level: 4";
				mes "   VIT+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   VIT+4";
				mes "";
				mes "Next Level: 5";
				mes "   VIT+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Stone Heart";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   VIT+5";
				mes "";
				mes "Next Level: 6";
				mes "   VIT+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Manacles";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   VIT+6";
				mes "";
				mes "Next Level: 7";
				mes "   VIT+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Armor Piecees of Dullahan";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   VIT+7";
				mes "";
				mes "Next Level: 8";
				mes "   VIT+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 Refined Bradium";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   VIT+8";
				mes "";
				mes "Next Level: 9";
				mes "   VIT+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Antler Horns";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   VIT+9";
				mes "";
				mes "Next Level: 10";
				mes "   VIT+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Hard Skin";
				break;
		}
		mes "";
		mes "Would you like to upgrade now?";
				switch(select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getINTupgrade {
		//getINTupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Intelligence";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Intelligence and has 10 levels.";
				mes "Lv 1  - +1 INT";
				mes "Lv 2  - +2 INT";
				mes "Lv 3  - +3 INT";
				mes "Lv 4  - +4 INT";
				mes "Lv 5  - +5 INT";
				mes "Lv 6  - +6 INT";
				mes "Lv 7  - +7 INT";
				mes "Lv 8  - +8 INT";
				mes "Lv 9  - +9 INT";
				mes "Lv 10 - +10 INT";
			case 1:
				mes "Current Level: 1";
				mes "   INT+1";
				mes "";
				mes "Next Level: 2";
				mes "   INT+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   INT+2";
				mes "";
				mes "Next Level: 3";
				mes "   INT+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   INT+3";
				mes "";
				mes "Next Level: 4";
				mes "   INT+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   INT+4";
				mes "";
				mes "Next Level: 5";
				mes "   INT+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Dragon Scales";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   INT+5";
				mes "";
				mes "Next Level: 6";
				mes "   INT+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Cloud Crumbs";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   INT+6";
				mes "";
				mes "Next Level: 7";
				mes "   INT+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Cold Ice";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   INT+7";
				mes "";
				mes "Next Level: 8";
				mes "   INT+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 Peaked Hats";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   INT+8";
				mes "";
				mes "Next Level: 9";
				mes "   INT+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Fancy Fairy Wings";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   INT+9";
				mes "";
				mes "Next Level: 10";
				mes "   INT+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Queen Wing Piece";
				break;
		}
		mes "";
		mes "Would you like to upgrade now?";
				switch(select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getDEXupgrade {
		//getDEXupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Dexterity";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Dexterity and has 10 levels.";
				mes "Lv 1  - +1 DEX";
				mes "Lv 2  - +2 DEX";
				mes "Lv 3  - +3 DEX";
				mes "Lv 4  - +4 DEX";
				mes "Lv 5  - +5 DEX";
				mes "Lv 6  - +6 DEX";
				mes "Lv 7  - +7 DEX";
				mes "Lv 8  - +8 DEX";
				mes "Lv 9  - +9 DEX";
				mes "Lv 10 - +10 DEX";
			case 1:
				mes "Current Level: 1";
				mes "   DEX+1";
				mes "";
				mes "Next Level: 2";
				mes "   DEX+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   DEX+2";
				mes "";
				mes "Next Level: 3";
				mes "   DEX+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   DEX+3";
				mes "";
				mes "Next Level: 4";
				mes "   DEX+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   DEX+4";
				mes "";
				mes "Next Level: 5";
				mes "   DEX+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Little Ghost Dolls";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   DEX+5";
				mes "";
				mes "Next Level: 6";
				mes "   DEX+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Alice's Aprons";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   DEX+6";
				mes "";
				mes "Next Level: 7";
				mes "   DEX+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Tengu Noses";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   DEX+7";
				mes "";
				mes "Next Level: 8";
				mes "   DEX+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 Burnt Parts";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   DEX+8";
				mes "";
				mes "Next Level: 9";
				mes "   DEX+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Cog Wheels";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   DEX+9";
				mes "";
				mes "Next Level: 10";
				mes "   DEX+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Will of Red Darkness";
				break;
		}
		mes "";
		mes "Would you like to upgrade now?";
				switch(select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getLUKupgrade {
		//getLUKupgrade (Upgrade Level)
		next;
		mes "[Fallen Angel]";
		mes "Current Mod: Luck";
		switch (getarg(0)) {
			case 0:
				mes "This option will add a modifier that increases Luck and has 10 levels.";
				mes "Lv 1  - +1 LUK";
				mes "Lv 2  - +2 LUK";
				mes "Lv 3  - +3 LUK";
				mes "Lv 4  - +4 LUK";
				mes "Lv 5  - +5 LUK";
				mes "Lv 6  - +6 LUK";
				mes "Lv 7  - +7 LUK";
				mes "Lv 8  - +8 LUK";
				mes "Lv 9  - +9 LUK";
				mes "Lv 10 - +10 LUK";
			case 1:
				mes "Current Level: 1";
				mes "   LUK+1";
				mes "";
				mes "Next Level: 2";
				mes "   LUK+2";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   None";
				break;
			case 2:
				mes "Current Level: 2";
				mes "   LUK+2";
				mes "";
				mes "Next Level: 3";
				mes "   LUK+3";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   10000 Zeny";
				break;
			case 3:
				mes "Current Level: 3";
				mes "   LUK+3";
				mes "";
				mes "Next Level: 4";
				mes "   LUK+4";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   50000 Zeny";
				break;
			case 4:
				mes "Current Level: 4";
				mes "   LUK+4";
				mes "";
				mes "Next Level: 5";
				mes "   LUK+5";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   100000 Zeny";
				mes "   100 Shining Scales";
				break;
			case 5:
				mes "Current Level: 5";
				mes "   LUK+5";
				mes "";
				mes "Next Level: 6";
				mes "   LUK+6";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   200000 Zeny";
				mes "   100 Four Leaf Clovers";
				break;
			case 6:
				mes "Current Level: 6";
				mes "   LUK+6";
				mes "";
				mes "Next Level: 7";
				mes "   LUK+7";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   300000 Zeny";
				mes "   100 Black Cat Dolls";
				break;
			case 7:
				mes "Current Level: 7";
				mes "   LUK+7";
				mes "";
				mes "Next Level: 8";
				mes "   LUK+8";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   500000 Zeny";
				mes "   100 White Masks";
				break;
			case 8:
				mes "Current Level: 8";
				mes "   LUK+8";
				mes "";
				mes "Next Level: 9";
				mes "   LUK+9";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   750000 Zeny";
				mes "   100 Mystic Horns";
				break;
			case 9:
				mes "Current Level: 9";
				mes "   LUK+9";
				mes "";
				mes "Next Level: 10";
				mes "   LUK+10";
				mes "";
				mes "Requirements for Upgrade:";
				mes "   1000000 Zeny";
				mes "   1 Gemstone";
				break;
		}
		mes "";
		mes "Would you like to upgrade now?";
				switch (select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

function getUPPERupgrade {
		next;
		mes "[Fallen Angel]";
		switch(getarg(0)) {
			case 30100:
				mes "This option will add the Rejuvenation upgrade.";
				mes "";
				mes "Rejuvenation";
				mes "Increases Healing done by 5% per Refine.";
				break;
			case 30101:
				mes "This option will add the Rewarded Faith upgrade.";
				mes "";
				mes "Rewarded Faith";
				mes "Increases Healing received by 2% per Refine.";
				break;
			case 30102:
				mes "This option will add the Vampiric Aura upgrade.";
				mes "";
				mes "Vampiric Aura";
				mes "Adds a 5% * Refine Chance to heal 1% of the damage dealt as Life.";
				break;
			case 30103:
			case 30104:
				mes "This option will add the Flamestrike upgrade.";
				mes "";
				mes "Flamestrike";
				mes "Adds a 1.5% * Refine chance to autocast Fire Bolt Level Refine/4 + 2 when attacking.";
				mes "Increases the damage of Firebolt by 5% * Refine";
				break;
			case 30105:
				mes "This option will add the Froststrike upgrade.";
				mes "";
				mes "Froststrike";
				mes "Adds a 1.5% * Refine chance to autocast Cold Bolt Level Refine/4 + 2 when attacking.";
				mes "Increases the damage of Coldbolt by 5% * Refine";
				break;
			case 30106:
				mes "This option will add the Stormstrike upgrade.";
				mes "";
				mes "Stormstrike";
				mes "Adds a 1.5% * Refine chance to autocast Lightning Bolt Level Refine/4 + 2 when attacking.";
				mes "Increases the damage of Lightningbolt by 5% * Refine";
				break;
			case 30107:
				mes "This option will add the Terrastrike upgrade.";
				mes "";
				mes "Terrastrike";
				mes "Adds a 1.5% * Refine chance to autocast Earth Spike Level Refine/4 + 2 when attacking.";
				mes "Increases the damage of Lightningbolt by 5% * Refine";
				break;
			case 30108:
				mes "This option will add the Divine Punishment upgrade.";
				mes "";
				mes "Divine Punishment";
				mes "Adds a 2% * Refine chance to autocast Lex Aeterna Level 1 when attacking.";
				break;
			case 30109:
				mes "This option will add the Booster Packer upgrade.";
				mes "";
				mes "Booster Packer";
				mes "Adds a chance to drop an Album Pouch when defeating enemies.";
				mes "The chance increases with the refine rate.";
				break;
			case 30110:
				mes "This option will add the Box Stacker upgrade.";
				mes "";
				mes "Box Stacker";
				mes "Adds a chance to drop an Box Pouch when defeating enemies.";
				mes "The chance increases with the refine rate.";
				break;
			case 30111:
				mes "This option will add the Bonfire Summoner upgrade.";
				mes "";
				mes "Bonfire Summoner";
				mes "Adds a chance to drop a Branch Pouch when defeating enemies.";
				mes "The chance increases with the refine rate.";
				break;
			case 30112:
				mes "This option will add the Zeny Magnet upgrade.";
				mes "";
				mes "Zeny Magnet";
				mes "Enemies drop 1 ~ (Enemy Level * Refine * 10) additional Zeny when slain";
				break;
		}

		
		mes "";
		mes "Would you like to upgrade now?";
				switch (select("Yes:No")) {
					case 1:
						return 1;
					case 2:
						return 0;
				}
}

	disable_items;
	
	if (checkweight(1201,1) == 0) {  //Checks to see if you have too many items
		mes "You are carrying too many items, please reduce them and come back!";
		close;
	}
	if (MaxWeight - Weight < 10000) { //Checks to see if you are overweight (1000 weight remaining)
		mes "You have overweight, please reduce it and come back!";
		close;
	}
	mes "[Fallen Angel]";
	mes "Let's do this shit.";
	next;
	mes "[Fallen Angel]";
	mes "Gonna try and put stuff in your headgear to make it better.";
	mes "You cannot place the same bonus in multiple slots.";
	next;
	switch(select("Enchant Upper Headgear:Enchant Middle Headgear:Enchant Lower Headgear")) {  //Initial Menu, Chooses which headgear slot to modify
		case 1:
		
			if (getequipisequiped(1) == 0) {  // If you are not equipped with an item in the lower headgear slot.
				mes "[Fallen Angel]";
				mes "You are not equipped with a Lower headgear.  Please equip one and try again.";
				close;
			}
			
			@eqitemid = getequipid(1);
			@eqrefine = getequiprefinerycnt(1);
			@card0 = getequipcardid(1,0);
			@card1 = getequipcardid(1,1);
			@card2 = getequipcardid(1,2);
			@card3 = getequipcardid(1,3);
			
			mes "[Fallen Angel]";
			mes "Which slot would you like to upgrade?";
			switch(select("Slot 0 - "+getitemname(@card0)+":Slot 1 - "+getitemname(@card1)+":Slot 2 - "+getitemname(@card2)+":Slot 3 - "+getitemname(@card3))) { //Sets which slot is being worked on and which is not for the section below
				case 1:
					@slotselected = 0;
					@sns1 = 1;
					@sns2 = 2;
					@sns3 = 3;
					break;
				case 2:
					@slotselected = 1;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 2;
					break;
				case 3:
					@slotselected = 2;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 3;
					break;
				case 4:
					@slotselected = 3;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 2;
					break;
			}
			
			if (getitemslots(getequipid(1)) > 0 && @slotselected == 0) {  //Checks to see if the item has card slots when choosing Slot 0 (The first card slot) (Helmets either have 0 or 1 card slot, not supported to check specific amounts of slots or positions)  This will only check the first slot where a slot would be.
				mes "[Fallen Angel]";
				mes "This item has a card slot and a modification cannot be placed in this slot";
				close;
			}
			
			if (getequipcardid(1,@slotselected) != 0) {
				mes "[Fallen Angel]";
				mes "This slot already has an upgrade in it and cannot be changed or upgraded.";
				close;
			}
			
			mes "[Fallen Angel]";
			mes "The following modifications are allowed for Lower headgears.";
			mes "Which Modification would you like to add in this slot?";
				
			switch(select("Rejuvenation:Rewarded Faith:Vampiric Aura:Flamestrike:Froststrike:Stormstrike:Terrastrike:Divine Punishment:Album Magnet:Box Magnet:Branch Magnet:Zeny Magnet")) {  //These check to see if the socket is within the itemID range of the select modifiers, then explains the modifier, asks the player if they want it, then gives it to them if they do.
				case 1: // Rejuvenation
					if (getequipcardid(1,@sns1) == 30100 || getequipcardid(1,@sns2) == 30100 || getequipcardid(1,@sns3) == 30100) {  //Checks to see if another slot already has this kind of modification
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30100)) {
						generateitem(@slotselected,30100,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				case 2: //Rewarded Faith
					if (getequipcardid(1,@sns1) == 30101 || getequipcardid(1,@sns2) == 30101 || getequipcardid(1,@sns3) == 30101) {  //Checks to see if another slot already has this kind of modification
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30101)) {
						generateitem(@slotselected,30101,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 3: //Vampiric Aura
					if (getequipcardid(1,@sns1) == 30102 || getequipcardid(1,@sns2) == 30102 || getequipcardid(1,@sns3) == 30102) {  //Checks to see if another slot already has this kind of modification
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30102)) {
						generateitem(@slotselected,30102,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 4: //Flamestrike
				if (getequipcardid(1,@sns1) == 30104 || getequipcardid(1,@sns2) == 30104 || getequipcardid(1,@sns3) == 30104) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30104)) {
						generateitem(@slotselected,30104,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 5: //Froststrike
					if (getequipcardid(1,@sns1) == 30105 || getequipcardid(1,@sns2) == 30105 || getequipcardid(1,@sns3) == 30105) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30105)) {
						generateitem(@slotselected,30105,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 6: //Stormstrike
					if (getequipcardid(1,@sns1) == 30106 || getequipcardid(1,@sns2) == 30106 || getequipcardid(1,@sns3) == 30106) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30106)) {
						generateitem(@slotselected,30106,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 7: //Terrastrike
					if (getequipcardid(1,@sns1) == 30107 || getequipcardid(1,@sns2) == 30107 || getequipcardid(1,@sns3) == 30107) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30107)) {
						generateitem(@slotselected,30107,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 8: //Divine Punishment
					if (getequipcardid(1,@sns1) == 30108 || getequipcardid(1,@sns2) == 30108 || getequipcardid(1,@sns3) == 30108) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30108)) {
						generateitem(@slotselected,30108,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 9: //Booster Packer
					if (getequipcardid(1,@sns1) == 30109 || getequipcardid(1,@sns2) == 30109 || getequipcardid(1,@sns3) == 30109) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30109)) {
						generateitem(@slotselected,30109,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 10: //Box Stacker
					if (getequipcardid(1,@sns1) == 30110 || getequipcardid(1,@sns2) == 30110 || getequipcardid(1,@sns3) == 30110) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30110)) {
						generateitem(@slotselected,30110,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 11: //Bonfire Summoner
					if (getequipcardid(1,@sns1) == 30111 || getequipcardid(1,@sns2) == 30111 || getequipcardid(1,@sns3) == 30111) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30111)) {
						generateitem(@slotselected,30111,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
				
				case 12: //Zeny Magnet
					if (getequipcardid(1,@sns1) == 30112 || getequipcardid(1,@sns2) == 30112 || getequipcardid(1,@sns3) == 30112) {
						modifieralreadyexists;
					}
					
					if (getUPPERupgrade(30112)) {
						generateitem(@slotselected,30112,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 1);
						finished;
					}
					close;
					break;
			}
			close;
			break;
			
		case 2:
			mes "[Fallen Angel]";
			mes "This option is not ready yet.";
			close;
		case 3:
			if (getequipisequiped(10) == 0) {  // If you are not equipped with an item in the lower headgear slot.
				mes "[Fallen Angel]";
				mes "You are not equipped with a Lower headgear.  Please equip one and try again.";
				close;
			}
			
			@eqitemid = getequipid(10);
			@eqrefine = getequiprefinerycnt(10);
			@card0 = getequipcardid(10,0);
			@card1 = getequipcardid(10,1);
			@card2 = getequipcardid(10,2);
			@card3 = getequipcardid(10,3);
		
	
			mes "[Fallen Angel]";
			mes "Which slot would you like to upgrade?";
			switch(select("Slot 0 - "+getitemname(@card0)+":Slot 1 - "+getitemname(@card1)+":Slot 2 - "+getitemname(@card2)+":Slot 3 - "+getitemname(@card3))) { //Sets which slot is being worked on and which is not for the section below
				case 1:
					@slotselected = 0;
					@sns1 = 1;
					@sns2 = 2;
					@sns3 = 3;
					break;
				case 2:
					@slotselected = 1;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 2;
					break;
				case 3:
					@slotselected = 2;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 3;
					break;
				case 4:
					@slotselected = 3;
					@sns1 = 0;
					@sns2 = 1;
					@sns3 = 2;
					break;
			}	
			if (getitemslots(getequipid(10)) > 0 && @slotselected == 0) {  //Checks to see if the item has card slots when choosing Slot 0 (The first card slot) (Helmets either have 0 or 1 card slot, not supported to check specific amounts of slots or positions)  This will only check the first slot where a slot would be.
				mes "[Fallen Angel]";
				mes "This item has a card slot and a modification cannot be placed in this slot";
				close;
			}
				
			if (getequipcardid(10,@slotselected) == 0) { //If the slot is empty, allows you to initiate a new craft  *The IF section here is for an empty new slot only.  The ELSE section will check what the slot is and ask to upgrade that slot.
				mes "[Fallen Angel]";
				mes "The following modifications are allowed for Lower headgears.";
				mes "Which Modification would you like to add in this slot?";
				
				switch(select("STR:INT:DEX:AGI:VIT:LUK")) {  //These check to see if the socket is within the itemID range of the select modifiers, then explains the modifier, asks the player if they want it, then gives it to them if they do.
					case 1: //STR
						if ((getequipcardid(10,@sns1) >= 4700 && getequipcardid(10,@sns1) <= 4709) || (getequipcardid(10,@sns2) >= 4700 && getequipcardid(10,@sns2) <= 4709) || (getequipcardid(10,@sns3) >= 4700 && getequipcardid(10,@sns3) <= 4709)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getSTRupgrade(0)) {
							generateitem(@slotselected,4700,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;
						
					case 2: //INT
						if ((getequipcardid(10,@sns1) >= 4710 && getequipcardid(10,@sns1) <= 4719) || (getequipcardid(10,@sns2) >= 4710 && getequipcardid(10,@sns2) <= 4719) || (getequipcardid(10,@sns3) >= 4710 && getequipcardid(10,@sns3) <= 4719)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getINTupgrade(0)) {
							generateitem(@slotselected,4710,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;

					case 3: //DEX
						if ((getequipcardid(10,@sns1) >= 4720 && getequipcardid(10,@sns1) <= 4729) || (getequipcardid(10,@sns2) >= 4720 && getequipcardid(10,@sns2) <= 4729) || (getequipcardid(10,@sns3) >= 4720 && getequipcardid(10,@sns3) <= 4729)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getDEXupgrade(0)) {
							generateitem(@slotselected,4720,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;
						
					case 4: //AGI
						if ((getequipcardid(10,@sns1) >= 4730 && getequipcardid(10,@sns1) <= 4739) || (getequipcardid(10,@sns2) >= 4730 && getequipcardid(10,@sns2) <= 4739) || (getequipcardid(10,@sns3) >= 4730 && getequipcardid(10,@sns3) <= 4739)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getAGIupgrade(0)) {
							generateitem(@slotselected,4730,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;
						
					case 5: //VIT
						if ((getequipcardid(10,@sns1) >= 4740 && getequipcardid(10,@sns1) <= 4749) || (getequipcardid(10,@sns2) >= 4740 && getequipcardid(10,@sns2) <= 4749) || (getequipcardid(10,@sns3) >= 4740 && getequipcardid(10,@sns3) <= 4749)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getVITupgrade(0)) {
							generateitem(@slotselected,4740,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;

					case 6: //LUK
						if ((getequipcardid(10,@sns1) >= 4750 && getequipcardid(10,@sns1) <= 4759) || (getequipcardid(10,@sns2) >= 4750 && getequipcardid(10,@sns2) <= 4759) || (getequipcardid(10,@sns3) >= 4750 && getequipcardid(10,@sns3) <= 4759)) {  //Checks to see if another slot already has this kind of modification
							modifieralreadyexists;
						}
						
						if (getLUKupgrade(0)) {
							generateitem(@slotselected,4750,@eqitemid,@eqrefine,@card0, @card1, @card2, @card3, 10);
							finished;
						}
						close;
						break;
						
				}
			}
								
			
			else { //If the Lower Headgear already has a modification in the selected slot
				//Determine Modification Type and Level
				if (getequipcardid(10,@slotselected) >= 4700 && getequipcardid(10,@slotselected) <= 4709) { // STR
					@modlevel = getequipcardid(10,@slotselected) - 4700 + 1;
					isstatmaxedout(@modlevel, 10, "Strength");
					if (getSTRupgrade(@modlevel)) {
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4701,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4702,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4703,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(702,100);
								
								Zeny -= 100000;
								delitem 702,100;
								generateitem(@slotselected,4704,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(7301,100);
								
								Zeny -= 200000;
								delitem 7301,100;
								generateitem(@slotselected,4705,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(7158,100);
								
								Zeny -= 300000;
								delitem 7158,100;
								generateitem(@slotselected,4706,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(7753,100);
								
								Zeny -= 500000;
								delitem 7753,100;
								generateitem(@slotselected,4707,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(6089,100);
								
								Zeny -= 750000;
								delitem 6089,100;
								generateitem(@slotselected,4708,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(7451,1);
								
								Zeny -= 1000000;
								delitem 7451,1;
								generateitem(@slotselected,4709,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}			
					}
					else {
						close;
					}
				}	
				if (getequipcardid(10,@slotselected) >= 4710 && getequipcardid(10,@slotselected) <= 4719) { //INT
					@modlevel = getequipcardid(10,@slotselected) - 4710 + 1;
					isstatmaxedout(@modlevel, 10, "Intelligence");
					if (getINTupgrade(@modlevel)) {
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4711,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4712,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4713,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(1036,100);
								
								Zeny -= 100000;
								delitem 1036,100;
								generateitem(@slotselected,4714,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(7162,100);
								
								Zeny -= 200000;
								delitem 7162,100;
								generateitem(@slotselected,4715,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(6253,100);
								
								Zeny -= 300000;
								delitem 6253,100;
								generateitem(@slotselected,4716,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(6021,100);
								
								Zeny -= 500000;
								delitem 6021,100;
								generateitem(@slotselected,4717,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(6557,100);
								
								Zeny -= 750000;
								delitem 6557,100;
								generateitem(@slotselected,4718,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(6326,1);
								
								Zeny -= 1000000;
								delitem 6326,1;
								generateitem(@slotselected,4719,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}			
							
					}
					
					else {
						close;
					}
				}
				if (getequipcardid(10,@slotselected) >= 4720 && getequipcardid(10,@slotselected) <= 4729) { //DEX
					@modlevel = getequipcardid(10,@slotselected) - 4720 + 1;
					isstatmaxedout(@modlevel, 10, "Dexterity");
					if (getDEXupgrade(@modlevel)) {
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4721,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4722,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4723,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(7268,100);
								
								Zeny -= 100000;
								delitem 7268,100;
								generateitem(@slotselected,4724,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(7047,100);
								
								Zeny -= 200000;
								delitem 7047,100;
								generateitem(@slotselected,4725,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(7159,100);
								
								Zeny -= 300000;
								delitem 7159,100;
								generateitem(@slotselected,4726,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(7512,100);
								
								Zeny -= 500000;
								delitem 7512,100;
								generateitem(@slotselected,4727,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(7093,100);
								
								Zeny -= 750000;
								delitem 7093,100;
								generateitem(@slotselected,4728,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(7566,1);
								
								Zeny -= 1000000;
								delitem 7566,1;
								generateitem(@slotselected,4729,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}			
							
					}
					else {
						close;
					}
				}
				if (getequipcardid(10,@slotselected) >= 4730 && getequipcardid(10,@slotselected) <= 4739) { //AGI
					@modlevel = getequipcardid(10,@slotselected) - 4730 + 1;
					isstatmaxedout(@modlevel, 10, "Agility");
					if (getAGIupgrade(@modlevel)) {
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4731,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4732,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4733,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(709,100);
								
								Zeny -= 100000;
								delitem 709,100;
								generateitem(@slotselected,4734,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(1095,100);
								
								Zeny -= 200000;
								delitem 1095,100;
								generateitem(@slotselected,4735,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(7156,100);
								
								Zeny -= 300000;
								delitem 7156,100;
								generateitem(@slotselected,4736,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(7072,100);
								
								Zeny -= 500000;
								delitem 7072,100;
								generateitem(@slotselected,4737,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(7799,100);
								
								Zeny -= 750000;
								delitem 7799,100;
								generateitem(@slotselected,4738,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(7513,1);
								
								Zeny -= 1000000;
								delitem 7513,1;
								generateitem(@slotselected,4739,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}
							
					}
					else {
						close;
					}
				}
				if (getequipcardid(10,@slotselected) >= 4740 && getequipcardid(10,@slotselected) <= 4749) { //VIT
					@modlevel = getequipcardid(10,@slotselected) - 4740 + 1;
					isstatmaxedout(@modlevel, 10, "Vitality");
					if (getVITupgrade(@modlevel)) {
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4741,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4742,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4743,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(953,100);
								
								Zeny -= 100000;
								delitem 953,100;
								generateitem(@slotselected,4744,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(1098,100);
								
								Zeny -= 200000;
								delitem 1098,100;
								generateitem(@slotselected,4745,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(7210,100);
								
								Zeny -= 300000;
								delitem 7210,100;
								generateitem(@slotselected,4746,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(6090,100);
								
								Zeny -= 500000;
								delitem 6090,100;
								generateitem(@slotselected,4747,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(6322,100);
								
								Zeny -= 750000;
								delitem 6322,100;
								generateitem(@slotselected,4748,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(6022,1);
								
								Zeny -= 1000000;
								delitem 6022,1;
								generateitem(@slotselected,4749,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}			
							
					}
					else {
						close;
					}
				}
				if (getequipcardid(10,@slotselected) >= 4750 && getequipcardid(10,@slotselected) <= 4759) { //LUK
					@modlevel = getequipcardid(10,@slotselected) - 4750 + 1;
					isstatmaxedout(@modlevel, 10, "Luck");
					if (getLUKupgrade(@modlevel)) {
						
						switch (@modlevel) {
							case 1: //for Upgrading Level 1 to Level 2.  It has no requirements so it simply makes the item
								generateitem(@slotselected,4751,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 2: //Upgrade from 2 to 3.
								isnotenoughzeny(10000);					
								
								Zeny -= 10000;
								generateitem(@slotselected,4752,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 3: //Upgrade from 3 to 4.
								isnotenoughzeny(50000);
								
								Zeny -= 50000;
								generateitem(@slotselected,4753,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 4: //Upgrade from 4 to 5.
								isnotenoughzeny(100000);
								isnotenoughitem(954,100);
								
								Zeny -= 100000;
								delitem 954,100;
								generateitem(@slotselected,4754,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 5: //Upgrade from 5 to 6.
								isnotenoughzeny(200000);
								isnotenoughitem(7321,100);
								
								Zeny -= 200000;
								delitem 7321,100;
								generateitem(@slotselected,4755,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 6: //Upgrade from 6 to 7.
								isnotenoughzeny(300000);
								isnotenoughitem(7206,100);
								
								Zeny -= 300000;
								delitem 7206,100;
								generateitem(@slotselected,4756,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 7: //Upgrade from 7 to 8.
								isnotenoughzeny(500000);
								isnotenoughitem(7568,100);
								
								Zeny -= 500000;
								delitem 7568,100;
								generateitem(@slotselected,4757,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
							case 8: //Upgrade from 8 to 9.
								isnotenoughzeny(750000);
								isnotenoughitem(6023,100);
								
								Zeny -= 750000;
								delitem 6023,100;
								generateitem(@slotselected,4758,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
							
							case 9: //Upgrade from 9 to 10.
								isnotenoughzeny(1000000);
								isnotenoughitem(7300,1);
								
								Zeny -= 1000000;
								delitem 7300,1;
								generateitem(@slotselected,4759,@eqitemid,@eqrefine,@card0,@card1,@card2,@card3, 10);
								finished;
								break;
								
						}			
							
					}
					else {
						close;
					}
					
				}
				close;
		
			}	
	}
}
	